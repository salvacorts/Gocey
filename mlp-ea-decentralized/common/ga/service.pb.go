// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service.proto

package ga

import (
	bytes "bytes"
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Individual struct {
	IndividualID         string   `protobuf:"bytes,2,opt,name=individualID,proto3" json:"individualID,omitempty"`
	Evaluated            bool     `protobuf:"varint,3,opt,name=evaluated,proto3" json:"evaluated,omitempty"`
	Fitness              float64  `protobuf:"fixed64,4,opt,name=fitness,proto3" json:"fitness,omitempty"`
	Genome               []byte   `protobuf:"bytes,5,opt,name=genome,proto3" json:"genome,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Individual) Reset()      { *m = Individual{} }
func (*Individual) ProtoMessage() {}
func (*Individual) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}
func (m *Individual) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Individual) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Individual.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Individual) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Individual.Merge(m, src)
}
func (m *Individual) XXX_Size() int {
	return m.Size()
}
func (m *Individual) XXX_DiscardUnknown() {
	xxx_messageInfo_Individual.DiscardUnknown(m)
}

var xxx_messageInfo_Individual proto.InternalMessageInfo

type Stats struct {
	Evaluations          int64    `protobuf:"varint,2,opt,name=evaluations,proto3" json:"evaluations,omitempty"`
	BestFitness          float64  `protobuf:"fixed64,3,opt,name=bestFitness,proto3" json:"bestFitness,omitempty"`
	AvgFitness           float64  `protobuf:"fixed64,4,opt,name=avgFitness,proto3" json:"avgFitness,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Stats) Reset()      { *m = Stats{} }
func (*Stats) ProtoMessage() {}
func (*Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}
func (m *Stats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Stats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stats.Merge(m, src)
}
func (m *Stats) XXX_Size() int {
	return m.Size()
}
func (m *Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_Stats proto.InternalMessageInfo

type ProblemDescription struct {
	ClientID             string   `protobuf:"bytes,1,opt,name=clientID,proto3" json:"clientID,omitempty"`
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProblemDescription) Reset()      { *m = ProblemDescription{} }
func (*ProblemDescription) ProtoMessage() {}
func (*ProblemDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{2}
}
func (m *ProblemDescription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProblemDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProblemDescription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProblemDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProblemDescription.Merge(m, src)
}
func (m *ProblemDescription) XXX_Size() int {
	return m.Size()
}
func (m *ProblemDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_ProblemDescription.DiscardUnknown(m)
}

var xxx_messageInfo_ProblemDescription proto.InternalMessageInfo

type NodeMetadata struct {
	GrpcPort             int64    `protobuf:"varint,1,opt,name=grpcPort,proto3" json:"grpcPort,omitempty"`
	GrpcWsPort           int64    `protobuf:"varint,2,opt,name=grpcWsPort,proto3" json:"grpcWsPort,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeMetadata) Reset()      { *m = NodeMetadata{} }
func (*NodeMetadata) ProtoMessage() {}
func (*NodeMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{3}
}
func (m *NodeMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeMetadata.Merge(m, src)
}
func (m *NodeMetadata) XXX_Size() int {
	return m.Size()
}
func (m *NodeMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_NodeMetadata proto.InternalMessageInfo

type IndividualsBatch struct {
	Individuals          []Individual `protobuf:"bytes,1,rep,name=individuals,proto3" json:"individuals"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *IndividualsBatch) Reset()      { *m = IndividualsBatch{} }
func (*IndividualsBatch) ProtoMessage() {}
func (*IndividualsBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{4}
}
func (m *IndividualsBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndividualsBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndividualsBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndividualsBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndividualsBatch.Merge(m, src)
}
func (m *IndividualsBatch) XXX_Size() int {
	return m.Size()
}
func (m *IndividualsBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_IndividualsBatch.DiscardUnknown(m)
}

var xxx_messageInfo_IndividualsBatch proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Individual)(nil), "ga.Individual")
	proto.RegisterType((*Stats)(nil), "ga.Stats")
	proto.RegisterType((*ProblemDescription)(nil), "ga.ProblemDescription")
	proto.RegisterType((*NodeMetadata)(nil), "ga.NodeMetadata")
	proto.RegisterType((*IndividualsBatch)(nil), "ga.IndividualsBatch")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 520 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x41, 0x6f, 0xd3, 0x30,
	0x18, 0x8d, 0xdb, 0x6d, 0xb4, 0x6e, 0x87, 0x26, 0x0b, 0xaa, 0xa8, 0x42, 0x26, 0xca, 0x29, 0x17,
	0x52, 0x69, 0x93, 0x38, 0x71, 0xa1, 0xea, 0x36, 0xb5, 0xd2, 0xd0, 0x14, 0x0e, 0x9c, 0x9d, 0xc4,
	0xf5, 0x2c, 0xd2, 0x38, 0xb2, 0x9d, 0xa2, 0xde, 0xf6, 0x73, 0xf8, 0x09, 0xfc, 0x84, 0x5e, 0x90,
	0x38, 0x72, 0x42, 0x34, 0xbf, 0x80, 0x23, 0x47, 0x14, 0xa7, 0x6b, 0xd2, 0xb1, 0x5e, 0xa2, 0xbc,
	0xe7, 0xf7, 0xde, 0xe7, 0xef, 0xf3, 0x07, 0x4f, 0x15, 0x95, 0x4b, 0x1e, 0x51, 0x3f, 0x93, 0x42,
	0x0b, 0xd4, 0x62, 0x64, 0xf8, 0x86, 0x71, 0x7d, 0x97, 0x87, 0x7e, 0x24, 0x16, 0x23, 0x26, 0x98,
	0x18, 0x99, 0xa3, 0x30, 0x9f, 0x1b, 0x64, 0x80, 0xf9, 0xab, 0x2c, 0xc3, 0x8b, 0x3d, 0x79, 0x42,
	0x52, 0x56, 0x1b, 0x32, 0xbd, 0xca, 0xa8, 0x1a, 0xd1, 0x45, 0xa6, 0x57, 0xd5, 0xb7, 0x32, 0xb9,
	0xf7, 0x00, 0xc2, 0x69, 0x1a, 0xf3, 0x25, 0x8f, 0x73, 0x92, 0x20, 0x17, 0xf6, 0xf9, 0x0e, 0x4d,
	0x27, 0x76, 0xcb, 0x01, 0x5e, 0x37, 0xd8, 0xe3, 0xd0, 0x2b, 0xd8, 0xa5, 0x4b, 0x92, 0xe4, 0x44,
	0xd3, 0xd8, 0x6e, 0x3b, 0xc0, 0xeb, 0x04, 0x35, 0x81, 0x6c, 0xf8, 0x6c, 0xce, 0x75, 0x4a, 0x95,
	0xb2, 0x8f, 0x1c, 0xe0, 0x81, 0xe0, 0x01, 0xa2, 0x01, 0x3c, 0x61, 0x34, 0x15, 0x0b, 0x6a, 0x1f,
	0x3b, 0xc0, 0xeb, 0x07, 0x5b, 0xe4, 0x7e, 0x86, 0xc7, 0x1f, 0x35, 0xd1, 0x0a, 0x39, 0xb0, 0xb7,
	0xcd, 0xe1, 0x22, 0x55, 0xa6, 0x76, 0x3b, 0x68, 0x52, 0xa5, 0x22, 0xa4, 0x4a, 0x5f, 0x6d, 0x0b,
	0xb4, 0x4d, 0x81, 0x26, 0x85, 0x30, 0x84, 0x64, 0xc9, 0xae, 0xf6, 0x6e, 0xd0, 0x60, 0xdc, 0x19,
	0x44, 0xb7, 0x52, 0x84, 0x09, 0x5d, 0x4c, 0xa8, 0x8a, 0x24, 0xcf, 0xca, 0x60, 0x34, 0x84, 0x9d,
	0x28, 0xe1, 0x34, 0xd5, 0xd3, 0x89, 0x0d, 0x4c, 0xcb, 0x3b, 0x5c, 0x36, 0x94, 0x91, 0x55, 0x22,
	0x48, 0x6c, 0x6e, 0xd4, 0x0f, 0x1e, 0xa0, 0x3b, 0x83, 0xfd, 0x0f, 0x22, 0xa6, 0x37, 0x54, 0x93,
	0x98, 0x68, 0x52, 0xa6, 0x30, 0x99, 0x45, 0xb7, 0x42, 0x6a, 0x93, 0xd2, 0x0e, 0x76, 0xb8, 0xbc,
	0x57, 0xf9, 0xff, 0x49, 0x99, 0xd3, 0xaa, 0xb5, 0x06, 0xe3, 0xce, 0xe0, 0x59, 0xfd, 0x0c, 0x6a,
	0x4c, 0x74, 0x74, 0x87, 0xde, 0xc2, 0x5e, 0x3d, 0x78, 0x65, 0x03, 0xa7, 0xed, 0xf5, 0xce, 0x9f,
	0xfb, 0x8c, 0xf8, 0xb5, 0x74, 0x7c, 0xb4, 0xfe, 0xf5, 0xda, 0x0a, 0x9a, 0xc2, 0xf3, 0xef, 0x2d,
	0x78, 0x3a, 0xe1, 0x4a, 0x4b, 0x1e, 0xe6, 0x9a, 0xc6, 0x97, 0xef, 0xd1, 0x14, 0xbe, 0xbc, 0xa6,
	0xfa, 0x89, 0xc6, 0x07, 0x3e, 0x13, 0x82, 0x25, 0xdb, 0xad, 0x0b, 0xf3, 0xb9, 0x7f, 0x59, 0x2e,
	0xc7, 0x70, 0x50, 0x56, 0xf9, 0x5f, 0xef, 0x5a, 0x68, 0x04, 0x3b, 0xd7, 0x54, 0x57, 0x0f, 0x76,
	0xc8, 0xdd, 0x2d, 0xdd, 0x46, 0xe2, 0x5a, 0xe8, 0x1d, 0x3c, 0x1b, 0x0b, 0x29, 0xc5, 0x97, 0xc6,
	0x9a, 0x1d, 0x32, 0x3e, 0x6a, 0xae, 0x72, 0x07, 0x54, 0xe7, 0x32, 0x6d, 0xb8, 0x1f, 0xa9, 0x86,
	0x07, 0xd2, 0x5c, 0x0b, 0x4d, 0x20, 0xba, 0xe1, 0x4c, 0x12, 0x4d, 0x1b, 0xc3, 0x45, 0x2f, 0xf6,
	0xfd, 0xd5, 0xb4, 0x0f, 0xa7, 0x8c, 0xbd, 0xf5, 0x06, 0x5b, 0x3f, 0x37, 0xd8, 0xfa, 0xb3, 0xc1,
	0xe0, 0xef, 0x06, 0x83, 0xfb, 0x02, 0x83, 0xaf, 0x05, 0x06, 0xdf, 0x0a, 0x0c, 0xd6, 0x05, 0x06,
	0x3f, 0x0a, 0x0c, 0x7e, 0x17, 0x18, 0x84, 0x27, 0xc6, 0x7b, 0xf1, 0x2f, 0x00, 0x00, 0xff, 0xff,
	0x2c, 0x25, 0x1e, 0x88, 0xcd, 0x03, 0x00, 0x00,
}

func (this *Individual) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Individual)
	if !ok {
		that2, ok := that.(Individual)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IndividualID != that1.IndividualID {
		return false
	}
	if this.Evaluated != that1.Evaluated {
		return false
	}
	if this.Fitness != that1.Fitness {
		return false
	}
	if !bytes.Equal(this.Genome, that1.Genome) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Stats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Stats)
	if !ok {
		that2, ok := that.(Stats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Evaluations != that1.Evaluations {
		return false
	}
	if this.BestFitness != that1.BestFitness {
		return false
	}
	if this.AvgFitness != that1.AvgFitness {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProblemDescription) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProblemDescription)
	if !ok {
		that2, ok := that.(ProblemDescription)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClientID != that1.ClientID {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NodeMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeMetadata)
	if !ok {
		that2, ok := that.(NodeMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GrpcPort != that1.GrpcPort {
		return false
	}
	if this.GrpcWsPort != that1.GrpcWsPort {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *IndividualsBatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IndividualsBatch)
	if !ok {
		that2, ok := that.(IndividualsBatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Individuals) != len(that1.Individuals) {
		return false
	}
	for i := range this.Individuals {
		if !this.Individuals[i].Equal(&that1.Individuals[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Individual) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ga.Individual{")
	s = append(s, "IndividualID: "+fmt.Sprintf("%#v", this.IndividualID)+",\n")
	s = append(s, "Evaluated: "+fmt.Sprintf("%#v", this.Evaluated)+",\n")
	s = append(s, "Fitness: "+fmt.Sprintf("%#v", this.Fitness)+",\n")
	s = append(s, "Genome: "+fmt.Sprintf("%#v", this.Genome)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Stats) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ga.Stats{")
	s = append(s, "Evaluations: "+fmt.Sprintf("%#v", this.Evaluations)+",\n")
	s = append(s, "BestFitness: "+fmt.Sprintf("%#v", this.BestFitness)+",\n")
	s = append(s, "AvgFitness: "+fmt.Sprintf("%#v", this.AvgFitness)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProblemDescription) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ga.ProblemDescription{")
	s = append(s, "ClientID: "+fmt.Sprintf("%#v", this.ClientID)+",\n")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ga.NodeMetadata{")
	s = append(s, "GrpcPort: "+fmt.Sprintf("%#v", this.GrpcPort)+",\n")
	s = append(s, "GrpcWsPort: "+fmt.Sprintf("%#v", this.GrpcWsPort)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IndividualsBatch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ga.IndividualsBatch{")
	if this.Individuals != nil {
		vs := make([]*Individual, len(this.Individuals))
		for i := range vs {
			vs[i] = &this.Individuals[i]
		}
		s = append(s, "Individuals: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DistributedEAClient is the client API for DistributedEA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DistributedEAClient interface {
	// Communication for Clients
	GetProblemDescription(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ProblemDescription, error)
	GetStats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Stats, error)
	BorrowIndividual(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Individual, error)
	ReturnIndividual(ctx context.Context, in *Individual, opts ...grpc.CallOption) (*empty.Empty, error)
	// Communication with other Servers
	MigrateIndividuals(ctx context.Context, in *IndividualsBatch, opts ...grpc.CallOption) (*empty.Empty, error)
}

type distributedEAClient struct {
	cc *grpc.ClientConn
}

func NewDistributedEAClient(cc *grpc.ClientConn) DistributedEAClient {
	return &distributedEAClient{cc}
}

func (c *distributedEAClient) GetProblemDescription(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ProblemDescription, error) {
	out := new(ProblemDescription)
	err := c.cc.Invoke(ctx, "/ga.DistributedEA/GetProblemDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedEAClient) GetStats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Stats, error) {
	out := new(Stats)
	err := c.cc.Invoke(ctx, "/ga.DistributedEA/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedEAClient) BorrowIndividual(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Individual, error) {
	out := new(Individual)
	err := c.cc.Invoke(ctx, "/ga.DistributedEA/BorrowIndividual", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedEAClient) ReturnIndividual(ctx context.Context, in *Individual, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ga.DistributedEA/ReturnIndividual", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedEAClient) MigrateIndividuals(ctx context.Context, in *IndividualsBatch, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ga.DistributedEA/MigrateIndividuals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributedEAServer is the server API for DistributedEA service.
type DistributedEAServer interface {
	// Communication for Clients
	GetProblemDescription(context.Context, *empty.Empty) (*ProblemDescription, error)
	GetStats(context.Context, *empty.Empty) (*Stats, error)
	BorrowIndividual(context.Context, *empty.Empty) (*Individual, error)
	ReturnIndividual(context.Context, *Individual) (*empty.Empty, error)
	// Communication with other Servers
	MigrateIndividuals(context.Context, *IndividualsBatch) (*empty.Empty, error)
}

// UnimplementedDistributedEAServer can be embedded to have forward compatible implementations.
type UnimplementedDistributedEAServer struct {
}

func (*UnimplementedDistributedEAServer) GetProblemDescription(ctx context.Context, req *empty.Empty) (*ProblemDescription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblemDescription not implemented")
}
func (*UnimplementedDistributedEAServer) GetStats(ctx context.Context, req *empty.Empty) (*Stats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (*UnimplementedDistributedEAServer) BorrowIndividual(ctx context.Context, req *empty.Empty) (*Individual, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BorrowIndividual not implemented")
}
func (*UnimplementedDistributedEAServer) ReturnIndividual(ctx context.Context, req *Individual) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnIndividual not implemented")
}
func (*UnimplementedDistributedEAServer) MigrateIndividuals(ctx context.Context, req *IndividualsBatch) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateIndividuals not implemented")
}

func RegisterDistributedEAServer(s *grpc.Server, srv DistributedEAServer) {
	s.RegisterService(&_DistributedEA_serviceDesc, srv)
}

func _DistributedEA_GetProblemDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedEAServer).GetProblemDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ga.DistributedEA/GetProblemDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedEAServer).GetProblemDescription(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedEA_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedEAServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ga.DistributedEA/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedEAServer).GetStats(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedEA_BorrowIndividual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedEAServer).BorrowIndividual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ga.DistributedEA/BorrowIndividual",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedEAServer).BorrowIndividual(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedEA_ReturnIndividual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Individual)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedEAServer).ReturnIndividual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ga.DistributedEA/ReturnIndividual",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedEAServer).ReturnIndividual(ctx, req.(*Individual))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedEA_MigrateIndividuals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndividualsBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedEAServer).MigrateIndividuals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ga.DistributedEA/MigrateIndividuals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedEAServer).MigrateIndividuals(ctx, req.(*IndividualsBatch))
	}
	return interceptor(ctx, in, info, handler)
}

var _DistributedEA_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ga.DistributedEA",
	HandlerType: (*DistributedEAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProblemDescription",
			Handler:    _DistributedEA_GetProblemDescription_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _DistributedEA_GetStats_Handler,
		},
		{
			MethodName: "BorrowIndividual",
			Handler:    _DistributedEA_BorrowIndividual_Handler,
		},
		{
			MethodName: "ReturnIndividual",
			Handler:    _DistributedEA_ReturnIndividual_Handler,
		},
		{
			MethodName: "MigrateIndividuals",
			Handler:    _DistributedEA_MigrateIndividuals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func (m *Individual) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Individual) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IndividualID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.IndividualID)))
		i += copy(dAtA[i:], m.IndividualID)
	}
	if m.Evaluated {
		dAtA[i] = 0x18
		i++
		if m.Evaluated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Fitness != 0 {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Fitness))))
		i += 8
	}
	if len(m.Genome) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Genome)))
		i += copy(dAtA[i:], m.Genome)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Stats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Evaluations != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Evaluations))
	}
	if m.BestFitness != 0 {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.BestFitness))))
		i += 8
	}
	if m.AvgFitness != 0 {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AvgFitness))))
		i += 8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ProblemDescription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProblemDescription) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ClientID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.ClientID)))
		i += copy(dAtA[i:], m.ClientID)
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NodeMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GrpcPort != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.GrpcPort))
	}
	if m.GrpcWsPort != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.GrpcWsPort))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IndividualsBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndividualsBatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Individuals) > 0 {
		for _, msg := range m.Individuals {
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedIndividual(r randyService, easy bool) *Individual {
	this := &Individual{}
	this.IndividualID = string(randStringService(r))
	this.Evaluated = bool(bool(r.Intn(2) == 0))
	this.Fitness = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Fitness *= -1
	}
	v1 := r.Intn(100)
	this.Genome = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Genome[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedService(r, 6)
	}
	return this
}

func NewPopulatedStats(r randyService, easy bool) *Stats {
	this := &Stats{}
	this.Evaluations = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Evaluations *= -1
	}
	this.BestFitness = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.BestFitness *= -1
	}
	this.AvgFitness = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.AvgFitness *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedService(r, 5)
	}
	return this
}

func NewPopulatedProblemDescription(r randyService, easy bool) *ProblemDescription {
	this := &ProblemDescription{}
	this.ClientID = string(randStringService(r))
	v2 := r.Intn(100)
	this.Payload = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.Payload[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedService(r, 3)
	}
	return this
}

func NewPopulatedNodeMetadata(r randyService, easy bool) *NodeMetadata {
	this := &NodeMetadata{}
	this.GrpcPort = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.GrpcPort *= -1
	}
	this.GrpcWsPort = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.GrpcWsPort *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedService(r, 3)
	}
	return this
}

func NewPopulatedIndividualsBatch(r randyService, easy bool) *IndividualsBatch {
	this := &IndividualsBatch{}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.Individuals = make([]Individual, v3)
		for i := 0; i < v3; i++ {
			v4 := NewPopulatedIndividual(r, easy)
			this.Individuals[i] = *v4
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedService(r, 2)
	}
	return this
}

type randyService interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneService(r randyService) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringService(r randyService) string {
	v5 := r.Intn(100)
	tmps := make([]rune, v5)
	for i := 0; i < v5; i++ {
		tmps[i] = randUTF8RuneService(r)
	}
	return string(tmps)
}
func randUnrecognizedService(r randyService, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldService(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldService(dAtA []byte, r randyService, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateService(dAtA, uint64(key))
		v6 := r.Int63()
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		dAtA = encodeVarintPopulateService(dAtA, uint64(v6))
	case 1:
		dAtA = encodeVarintPopulateService(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateService(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateService(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateService(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateService(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Individual) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IndividualID)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Evaluated {
		n += 2
	}
	if m.Fitness != 0 {
		n += 9
	}
	l = len(m.Genome)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Stats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Evaluations != 0 {
		n += 1 + sovService(uint64(m.Evaluations))
	}
	if m.BestFitness != 0 {
		n += 9
	}
	if m.AvgFitness != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProblemDescription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientID)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GrpcPort != 0 {
		n += 1 + sovService(uint64(m.GrpcPort))
	}
	if m.GrpcWsPort != 0 {
		n += 1 + sovService(uint64(m.GrpcWsPort))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IndividualsBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Individuals) > 0 {
		for _, e := range m.Individuals {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Individual) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Individual{`,
		`IndividualID:` + fmt.Sprintf("%v", this.IndividualID) + `,`,
		`Evaluated:` + fmt.Sprintf("%v", this.Evaluated) + `,`,
		`Fitness:` + fmt.Sprintf("%v", this.Fitness) + `,`,
		`Genome:` + fmt.Sprintf("%v", this.Genome) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Stats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Stats{`,
		`Evaluations:` + fmt.Sprintf("%v", this.Evaluations) + `,`,
		`BestFitness:` + fmt.Sprintf("%v", this.BestFitness) + `,`,
		`AvgFitness:` + fmt.Sprintf("%v", this.AvgFitness) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProblemDescription) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProblemDescription{`,
		`ClientID:` + fmt.Sprintf("%v", this.ClientID) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeMetadata{`,
		`GrpcPort:` + fmt.Sprintf("%v", this.GrpcPort) + `,`,
		`GrpcWsPort:` + fmt.Sprintf("%v", this.GrpcWsPort) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IndividualsBatch) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForIndividuals := "[]Individual{"
	for _, f := range this.Individuals {
		repeatedStringForIndividuals += strings.Replace(strings.Replace(f.String(), "Individual", "Individual", 1), `&`, ``, 1) + ","
	}
	repeatedStringForIndividuals += "}"
	s := strings.Join([]string{`&IndividualsBatch{`,
		`Individuals:` + repeatedStringForIndividuals + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Individual) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Individual: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Individual: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndividualID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndividualID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evaluated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Evaluated = bool(v != 0)
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fitness", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Fitness = float64(math.Float64frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Genome", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Genome = append(m.Genome[:0], dAtA[iNdEx:postIndex]...)
			if m.Genome == nil {
				m.Genome = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Stats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evaluations", wireType)
			}
			m.Evaluations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Evaluations |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestFitness", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.BestFitness = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgFitness", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AvgFitness = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProblemDescription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProblemDescription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProblemDescription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpcPort", wireType)
			}
			m.GrpcPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrpcPort |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpcWsPort", wireType)
			}
			m.GrpcWsPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrpcWsPort |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndividualsBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndividualsBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndividualsBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Individuals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Individuals = append(m.Individuals, Individual{})
			if err := m.Individuals[len(m.Individuals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthService
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)
