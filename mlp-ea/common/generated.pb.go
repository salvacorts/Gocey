// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/salvacorts/TFG-Parasitic-Metaheuristics/mlp-ea-centralized/common/proto/github.com/salvacorts/TFG-Parasitic-Metaheuristics/mlp-ea/common/generated.proto

package common

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func (m *MLP) Reset()         { *m = MLP{} }
func (m *MLP) String() string { return proto.CompactTextString(m) }
func (*MLP) ProtoMessage()    {}
func (*MLP) Descriptor() ([]byte, []int) {
	return fileDescriptor_945fa4230f36a5bb, []int{0}
}
func (m *MLP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MLP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MLP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MLP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MLP.Merge(m, src)
}
func (m *MLP) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MLP) XXX_DiscardUnknown() {
	xxx_messageInfo_MLP.DiscardUnknown(m)
}

var xxx_messageInfo_MLP proto.InternalMessageInfo

func (m *MLPFactoryConfig) Reset()         { *m = MLPFactoryConfig{} }
func (m *MLPFactoryConfig) String() string { return proto.CompactTextString(m) }
func (*MLPFactoryConfig) ProtoMessage()    {}
func (*MLPFactoryConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_945fa4230f36a5bb, []int{1}
}
func (m *MLPFactoryConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MLPFactoryConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MLPFactoryConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MLPFactoryConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MLPFactoryConfig.Merge(m, src)
}
func (m *MLPFactoryConfig) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MLPFactoryConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MLPFactoryConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MLPFactoryConfig proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MLP)(nil), "github.com.salvacorts.TFGParasiticMetaheuristics.mlpea.common.MLP")
	proto.RegisterType((*MLPFactoryConfig)(nil), "github.com.salvacorts.TFGParasiticMetaheuristics.mlpea.common.MLPFactoryConfig")
}

func init() {
	proto.RegisterFile("github.com/salvacorts/TFG-Parasitic-Metaheuristics/mlp-ea-centralized/common/proto/github.com/salvacorts/TFG-Parasitic-Metaheuristics/mlp-ea/common/generated.proto", fileDescriptor_945fa4230f36a5bb)
}

var fileDescriptor_945fa4230f36a5bb = []byte{
	// 407 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xcf, 0xaa, 0xd3, 0x40,
	0x14, 0xc6, 0x93, 0x1b, 0x13, 0x75, 0xbc, 0xc2, 0x25, 0xab, 0x22, 0x92, 0x5c, 0xef, 0x4a, 0xc4,
	0x24, 0xa0, 0xb8, 0x11, 0xdc, 0x54, 0x68, 0x5d, 0x24, 0x52, 0x42, 0x57, 0x6e, 0xc2, 0x69, 0x32,
	0x4d, 0x07, 0xe6, 0x4f, 0x98, 0x4c, 0x24, 0xf5, 0x09, 0x7c, 0x04, 0x97, 0x15, 0x37, 0x3e, 0x8a,
	0x4b, 0x9f, 0xa0, 0x48, 0xfa, 0x02, 0xae, 0x5d, 0x49, 0x27, 0xd5, 0x36, 0x5d, 0xde, 0x65, 0x72,
	0x7e, 0xdf, 0x6f, 0x3e, 0xce, 0x41, 0xdf, 0xcc, 0x92, 0xa8, 0x55, 0xb3, 0x08, 0x73, 0xc1, 0xa2,
	0x1a, 0xe8, 0x47, 0xc8, 0x85, 0x54, 0x75, 0x34, 0x9f, 0x4c, 0x83, 0x19, 0x48, 0xa8, 0x89, 0x22,
	0x79, 0x90, 0x60, 0x05, 0x2b, 0xdc, 0x48, 0x52, 0x2b, 0x92, 0xd7, 0x11, 0xa3, 0x55, 0x80, 0x21,
	0xc8, 0x31, 0x57, 0x12, 0x28, 0xf9, 0x84, 0x8b, 0x28, 0x17, 0x8c, 0x09, 0x1e, 0x55, 0x52, 0x28,
	0x11, 0xdd, 0x5a, 0xf9, 0x4f, 0x53, 0x62, 0x8e, 0x25, 0x28, 0x5c, 0x84, 0x5a, 0xe8, 0xbe, 0x39,
	0x1a, 0xc3, 0xa3, 0x31, 0x9c, 0x4f, 0xa6, 0xff, 0x85, 0x43, 0x5f, 0xc8, 0x68, 0x85, 0x21, 0xec,
	0x75, 0x8f, 0x82, 0x93, 0x42, 0xa5, 0x28, 0x45, 0x5f, 0x73, 0xd1, 0x2c, 0xf5, 0xd7, 0xa1, 0xb3,
	0x28, 0x45, 0xff, 0xda, 0xcd, 0x0b, 0x64, 0x25, 0xf1, 0xcc, 0x7d, 0x82, 0x1c, 0x9a, 0xed, 0x5b,
	0x8c, 0xcc, 0x6b, 0xf3, 0xa9, 0x39, 0x46, 0xdd, 0xd6, 0x77, 0x62, 0xfd, 0x27, 0xb5, 0x69, 0x0a,
	0x0a, 0xbf, 0xbe, 0xf7, 0x79, 0xe3, 0x1b, 0xbf, 0xbf, 0xfa, 0xc6, 0xcd, 0xf7, 0x0b, 0x74, 0x95,
	0xc4, 0xb3, 0x09, 0xe4, 0x4a, 0xc8, 0xf5, 0x5b, 0xc1, 0x97, 0xa4, 0x74, 0x9f, 0xa1, 0x4b, 0xc2,
	0xab, 0x46, 0x65, 0x14, 0xd6, 0x58, 0xd6, 0xda, 0x63, 0x8d, 0xef, 0xfe, 0xd9, 0xfa, 0x16, 0xe1,
	0x2a, 0x7d, 0xa0, 0x87, 0xb1, 0x9e, 0xb9, 0xcf, 0xd1, 0x43, 0xd1, 0xa8, 0x13, 0xf8, 0x62, 0x08,
	0x5f, 0xf6, 0xd3, 0x03, 0xfd, 0x0a, 0xb9, 0x8c, 0xf0, 0x6c, 0x45, 0x8a, 0x02, 0xf3, 0x8c, 0xe3,
	0x46, 0x0a, 0x5e, 0x8f, 0xac, 0x61, 0xe4, 0x8a, 0x11, 0xfe, 0x4e, 0x13, 0xef, 0x7b, 0x40, 0xc7,
	0xa0, 0x3d, 0x8f, 0xdd, 0x39, 0x8f, 0x41, 0x3b, 0x8c, 0x5d, 0x23, 0x67, 0x1f, 0xa3, 0x72, 0x64,
	0xeb, 0x4d, 0xdc, 0xef, 0xb6, 0xbe, 0x9d, 0x40, 0x1b, 0xa7, 0xa9, 0xcd, 0xa0, 0x8d, 0xa5, 0x26,
	0x08, 0xdf, 0x13, 0xce, 0x09, 0x41, 0xb8, 0x26, 0x08, 0x8f, 0xe5, 0x71, 0x55, 0xe3, 0xc7, 0x3f,
	0x3a, 0xcf, 0xfc, 0xd9, 0x79, 0xe6, 0xaf, 0xce, 0x33, 0xbe, 0xec, 0x3c, 0x63, 0xb3, 0xf3, 0xcc,
	0x0f, 0x4e, 0x7f, 0xab, 0x85, 0xa3, 0x6f, 0xf0, 0xf2, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9f,
	0x94, 0xf5, 0x24, 0x99, 0x02, 0x00, 0x00,
}

func (m *MLP) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MLP) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.L_rate != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.L_rate))))
		i += 8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MLPFactoryConfig) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MLPFactoryConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InputLayers != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.InputLayers))
	}
	if m.OutputLayers != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.OutputLayers))
	}
	if m.MinHiddenNeurons != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.MinHiddenNeurons))
	}
	if m.MaxHiddenNeurons != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.MaxHiddenNeurons))
	}
	if m.MaxLR != 0 {
		dAtA[i] = 0x29
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxLR))))
		i += 8
	}
	if m.MinLR != 0 {
		dAtA[i] = 0x31
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MinLR))))
		i += 8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MLP) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L_rate != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MLPFactoryConfig) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InputLayers != 0 {
		n += 1 + sovGenerated(uint64(m.InputLayers))
	}
	if m.OutputLayers != 0 {
		n += 1 + sovGenerated(uint64(m.OutputLayers))
	}
	if m.MinHiddenNeurons != 0 {
		n += 1 + sovGenerated(uint64(m.MinHiddenNeurons))
	}
	if m.MaxHiddenNeurons != 0 {
		n += 1 + sovGenerated(uint64(m.MaxHiddenNeurons))
	}
	if m.MaxLR != 0 {
		n += 9
	}
	if m.MinLR != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGenerated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MLP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MLP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MLP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field L_rate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.L_rate = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MLPFactoryConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MLPFactoryConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MLPFactoryConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputLayers", wireType)
			}
			m.InputLayers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InputLayers |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputLayers", wireType)
			}
			m.OutputLayers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputLayers |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinHiddenNeurons", wireType)
			}
			m.MinHiddenNeurons = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinHiddenNeurons |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxHiddenNeurons", wireType)
			}
			m.MaxHiddenNeurons = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxHiddenNeurons |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLR", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxLR = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLR", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MinLR = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGenerated(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthGenerated
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGenerated = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated   = fmt.Errorf("proto: integer overflow")
)
